#!/bin/bash -eux
set -o pipefail

baseDir="$(pwd)"

baseRepo=https://github.com/alxndrsn/odk-central.git # TODO this will need to be updated to getodk/central
initialVersion=v1.5.3-with-extra-debug
targetVersion=upgrade-postgres
# include a nonce in the test directory, as we will not own the postgres data
# directory by the end of the test.  An alternative would be to `sudo` when
# removing the test directory, but better to not require extra permissions.
testDir="tmp/$initialVersion-to-$targetVersion/$(date +%s)"

# a bunch of env vars for containers
export SYSADMIN_EMAIL=no-reply@getodk.org
export DOMAIN=local
export HTTP_PORT=18080
export HTTPS_PORT=18443
export SSL_TYPE=selfsign

testPrefix="$(basename "$0")"
log() {
  echo "[$testPrefix] $*"
}
warn() {
  echo
  log "!!! WARN !!! $*"
  echo
}

if ! command -v docker-compose >/dev/null; then
  log "!!!"
  log "!!! docker-compose not found!"
  log "!!!"
  exit 1
fi

exec_in_service_container() {
  local scriptName="$1"
  docker exec -i central_service_1 node -e "$(cat "$baseDir/$scriptName")"
}

confirm_postgres_version() {
  local expectedVersion="$1"
  local actualVersion
  actualVersion="$(exec_in_service_container get-postgres-version.js)"
  if [[ "$actualVersion" = "$expectedVersion" ]]; then
    log "[confirm_postgres_version] Postgres version confirmed: $expectedVersion"
  else
    log "[confirm_postgres_version] !!!"
    log "[confirm_postgres_version] !!! Incorrect postgres version !!!"
    log "[confirm_postgres_version] !!!   Expected: $expectedVersion"
    log "[confirm_postgres_version] !!!    but got: $actualVersion"
    log "[confirm_postgres_version] !!!"
    exit 1
  fi
}

confirm_seed_data() {
  local isOk
  isOk="$(exec_in_service_container get-migration-seed.js)"
  if [[ "$isOk" = "true" ]]; then
    log "[confirm_seed_data] Seed data OK!"
  else
    log "[confirm_seed_data] !!!"
    log "[confirm_seed_data] !!! Incorrect migration seed !!!"
    log "[confirm_seed_data] !!!   Expected: true"
    log "[confirm_seed_data] !!!    but got: $isOk"
    log "[confirm_seed_data] !!!"
    exit 1
  fi
}

confirm_backend_running_ok() {
  local response_code
  for _ in {0..120}; do
    response_code="$(curl -k -s -o /dev/null -w "%{http_code}" "https://localhost:$HTTPS_PORT/v1/sessions" --data '{"email":"doesntexist@example.com","password":"doesntmatter"}' --header 'Content-Type: application/json' || true)"
    if [[ "$response_code" = 401 ]]; then
      log "[confirm_backend_running_ok] Looks OK!"
      return
    fi
    log "[confirm_backend_running_ok] Backend returned unexpected response: $response_code.  Sleeping..."
    sleep 1
  done
  log "[confirm_backend_running_ok] !!!"
  log "[confirm_backend_running_ok] !!! Backend did not start."
  log "[confirm_backend_running_ok] !!!"
  exit 1
}

wait_for_service_container() {
  log "[wait_for_service_container] Waiting for service container to start..."
  sleep 10
  # ...and for the local.json config file to have been created
  for _ in {0..60}; do
    dbHost="$(exec_in_service_container get-db-host.js)"
    if [[ "$dbHost" = postgres ]] || [[ "$dbHost" = postgres-14 ]]; then
      log "[wait_for_service_container] Database config looks OK!"
      return
    fi
    log "[wait_for_service_container] Database config hasn't updated.  Sleeping..."
    sleep 1
  done
  warn "[wait_for_service_container] !!!"
  warn "[wait_for_service_container] !!! Database config never updated."
  warn "[wait_for_service_container] !!!"
  exit 1
}

log "Cleaning up test directory..."
rm -rf "$testDir" || true
mkdir -p "$testDir"

log "Creating test directory..."
cd "$testDir"
# disable annoying git messages
git config --local advice.detachedHead false

log "Cloning odk-central git repo..."
# I suspect we -have- to maintain the `central` name as per https://github.com/getodk/central/issues/300
git clone --progress "$baseRepo" central # fetch the whole repo so that git describe --tags works predictably
cd central
git checkout "$initialVersion"
git submodule init
git submodule update -i --progress --jobs 16

# make /data/transfer dir work on MacOSX darwin
sed s:/data/transfer:./files/service/data-transfer: docker-compose.yml

log "\nChecking for existing containers..."
if [[ "$(docker-compose ps | tail -n+3 | wc -l | xargs)" != "0" ]]; then # xargs for BSD-compatability
  warn "docker-compose HAS ALREADY CREATED CONTAINERS ON THIS SYSTEM:"
  docker-compose ps
  warn "THESE CONTAINERS AND THEIR VOLUMES WILL BE DESTROYED!"

  read -r -n1 -p "Continue (y/n)? " choice
  echo
  case "$choice" in
    y|Y) echo "OK, containers and volumes will be destroyed..." ;;
    *  ) log "Aborted."; exit 1 ;;
  esac

  log "Cleaning docker-compose...\n"
  docker-compose down --remove-orphans --volumes
  echo
fi

log "Starting $initialVersion..."
docker-compose build --parallel
docker-compose up --remove-orphans --detach

wait_for_service_container

confirm_postgres_version 9.6
confirm_backend_running_ok

log "Seeding database..."
exec_in_service_container seed-db.js
confirm_seed_data
confirm_postgres_version 9.6

log "Upgrading central..."
# see: https://docs.getodk.org/central-upgrade/
git checkout "$targetVersion"
git submodule update -i --progress --jobs 16
docker-compose build --parallel

log "Restarting containers..."
docker-compose stop
docker-compose up --remove-orphans --detach

wait_for_service_container

confirm_postgres_version 14
confirm_seed_data
confirm_postgres_version 14
confirm_backend_running_ok

log "Test passed OK!"
