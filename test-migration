#!/bin/bash -eu
set -o pipefail

baseRepo=git@github.com:getodk/central.git
initialVersion=1.5.3
targetVersion=not-yet-committed
testDir="tmp/$initialVersion-to-$targetVersion"

baseDir="$(pwd)"

testPrefix="$(basename "$0")"
log() {
  echo "[$testPrefix] $*"
}
warn() {
  echo
  log "!!! WARN !!! $*"
  echo
}

exec_in_service_container() {
  local scriptName="$1"
  docker exec -i central_service_1 node -e "$(cat "$baseDir/$scriptName")" 2>/dev/tty
}

confirm_postgres_version() {
  local expectedVersion="$1"
  local actualVersion="$(exec_in_service_container get-postgres-version.js)"
  if [[ "$actualVersion" = "$expectedVersion" ]]; then
    log "[confirm_postgres_version] Postgres version confirmed: $expectedVersion"
  else
    log "[confirm_postgres_version] !!!"
    log "[confirm_postgres_version] !!! Incorrect postgres version !!!"
    log "[confirm_postgres_version] !!!   Expected: $expectedVersion"
    log "[confirm_postgres_version] !!!    but got: $actualVersion"
    log "[confirm_postgres_version] !!!"
    exit 1
  fi
}

confirm_seed_data() {
  local isOk="$(exec_in_service_container get-migration-seed.js)"
  if [[ "$isOk" = "true" ]]; then
    log "[confirm_seed_data] Seed data OK!"
  else
    log "[confirm_seed_data] !!!"
    log "[confirm_seed_data] !!! Incorrect migration seed !!!"
    log "[confirm_seed_data] !!!   Expected: true"
    log "[confirm_seed_data] !!!    but got: $isOk"
    log "[confirm_seed_data] !!!"
    exit 1
  fi
}

wait_for_service_container() {
  log "Waiting for service container to start..."
  # ...and for the local.json config file to have been created
  sleep 10 # TODO need to wait properly somehow
}

log "Cleaning up test directory..."
rm -rf "$testDir" || true
mkdir -p "$testDir"

log "Creating test directory..."
cd "$testDir"

log "Cloning odk-central git repo..."
tagName="v$initialVersion"
git clone --branch "$tagName" --depth 1 "$baseRepo"
cd central
git checkout "$tagName"
git submodule init

log "\nChecking for existing containers..." # or are they images?
# I suspect we -have- to maintain the `central` name as per https://github.com/getodk/central/issues/300
if [[ "$(docker-compose ps | tail -n+3 | wc --lines)" != "0" ]]; then
  warn "docker-compose HAS ALREADY CREATED IMAGES ON THIS SYSTEM:" # or are they containers?
  docker-compose ps
  warn "THESE IMAGES WILL BE DESTROYED!"

  read -n1 -p "Continue (y/n)? " choice
  echo
  case "$choice" in
    y|Y) echo "OK, images will be destroyed..." ;; # or are they containers?
    *  ) log "Aborted."; exit 1 ;;
  esac

  log "Cleaning docker-compose...\n"
  docker-compose down
  echo
fi

log "Starting $initialVersion..."
SYSADMIN_EMAIL=no-reply@getodk.org \
        DOMAIN=local \
     HTTP_PORT=18080 \
    HTTPS_PORT=18443 \
  docker-compose up -d

wait_for_service_container

confirm_postgres_version 9.6

log "Seeding database..."
exec_in_service_container seed-db.js
confirm_seed_data
confirm_postgres_version 9.6

log "Upgrading central..."
# see: https://docs.getodk.org/central-upgrade/
git fetch origin "$targetVersion"
git checkout "$targetVersion"
git submodule update -i
docker-compose build

log "Restarting containers..."
docker-compose stop
docker-compose up

wait_for_service_container

confirm_postgres_version 14
confirm_seed_data
confirm_postgres_version 14

log "Test passed OK!"
